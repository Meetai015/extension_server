{"version":3,"file":"popup.b8601ac9ead6fa357210.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAtDA;AAwDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxIA","sources":["webpack://chrome-extension-boilerplate-react/./src/pages/Popup/Popup.jsx","webpack://chrome-extension-boilerplate-react/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect } from 'react';\nimport logo from '../../assets/img/logo.svg';\nimport Greetings from '../../containers/Greetings/Greetings';\nimport './Popup.css';\nimport RecordRTC from 'recordrtc';\n\n\n\nfunction tabCapture() {\n  return new Promise((resolve) => {\n    chrome.tabCapture.capture(\n      {\n        audio: true,\n        video: false,\n      },\n      (stream) => {\n        resolve(stream);\n      } \n    );\n  });\n  console.log(\"Streaming\")\n}\n\nfunction saveFile(blob, filename) {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  URL.revokeObjectURL(url);\n}\n\n// function stopRecording(stream, durationInSeconds) {\n//   return new Promise((resolve) => {\n//     setTimeout(() => {\n//       if (stream && stream.getVideoTracks) {\n//         stream.getVideoTracks().forEach((track) => track.stop());\n//       }\n//       resolve();\n//     }, durationInSeconds * 1000);\n//   });\n// }\n\nfunction to16BitPCM(input) {\n  const dataLength = input.length * (16 / 8);\n  const dataBuffer = new ArrayBuffer(dataLength);\n  const dataView = new DataView(dataBuffer);\n  let offset = 0;\n  for (let i = 0; i < input.length; i++, offset += 2) {\n    const s = Math.max(-1, Math.min(1, input[i]));\n    dataView.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n  }\n  return dataView;\n}\n\nfunction to16kHz(audioData, sampleRate = 44100) {\n  const data = new Float32Array(audioData);\n  const fitCount = Math.round(data.length * (16000 / sampleRate));\n  const newData = new Float32Array(fitCount);\n  const springFactor = (data.length - 1) / (fitCount - 1);\n  newData[0] = data[0];\n  for (let i = 1; i < fitCount - 1; i++) {\n    const tmp = i * springFactor;\n    const before = Math.floor(tmp).toFixed();\n    const after = Math.ceil(tmp).toFixed();\n    const atPoint = tmp - before; \n    newData[i] = data[before] + (data[after] - data[before]) * atPoint;\n  }\n  newData[fitCount - 1] = data[data.length - 1];\n  return newData;\n}\n\nfunction sendMessageToTab(tabId, data) {\n  console.log(tabId)\n  console.log(data)\n  return new Promise((resolve) => {\n    chrome.tabs.sendMessage(tabId, data\n    );\n  });\n}\nconst Popup = () => {\n  useEffect(() => {\n    startRecording();\n  }, []);\n\n  const startRecording = async () => {\n    try {\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n\n      // Capture audio stream\n      const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n      // Capture video stream\n      const videoStream = await chrome.tabCapture.capture({ video: true }, tab.id);\n\n      // Combine audio and video streams\n      const mediaStream = new MediaStream([...audioStream.getTracks(), ...videoStream.getVideoTracks()]);\n\n      // Start recording\n      const mediaRecorder = new MediaRecorder(mediaStream);\n      const recordedChunks = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          recordedChunks.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const recordedBlob = new Blob(recordedChunks, { type: 'video/webm' });\n        saveFile(recordedBlob, 'recorded_video.webm');\n      };\n\n      mediaRecorder.start();\n\n      setTimeout(() => {\n        mediaRecorder.stop();\n      }, 10000); // Record for 10 seconds\n\n    } catch (error) {\n      console.error(\"Error capturing tab:\", error);\n    }\n  };\n\n  const saveFile = (blob, filename) => {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return null;\n};\n\nexport default Popup;\n","__webpack_require__.h = () => (\"fb11e42ea57f9eb59384\")"],"names":[],"sourceRoot":""}